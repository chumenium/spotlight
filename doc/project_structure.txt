SpotLight プロジェクト構造ドキュメント
==========================================

このドキュメントでは、SpotLightアプリのプロジェクト構造と各ディレクトリ・ファイルの役割について説明します。

## プロジェクト全体構造

```
spotlight/
├── lib/                    # メインのソースコード
├── assets/                 # 静的ファイル（画像、アイコン、フォント）
├── doc/                    # プロジェクトドキュメント
├── pubspec.yaml           # プロジェクト設定・依存関係
├── pubspec.lock           # 依存関係のロックファイル
└── README.md              # プロジェクト概要
```

## lib/ ディレクトリ（メインソースコード）

### lib/main.dart
- **役割**: アプリケーションのエントリーポイント
- **内容**: 
  - main()関数の定義
  - MaterialAppの設定
  - テーマ設定
  - 初期画面の表示

### lib/models/
- **役割**: データモデルの定義
- **予定されるファイル**:
  - user.dart: ユーザー情報のモデル
  - post.dart: 投稿データのモデル
  - comment.dart: コメントデータのモデル
  - notification.dart: 通知データのモデル
  - badge.dart: バッジデータのモデル

### lib/providers/
- **役割**: 状態管理（Providerパターン）
- **予定されるファイル**:
  - auth_provider.dart: 認証状態の管理
  - post_provider.dart: 投稿データの状態管理
  - user_provider.dart: ユーザー情報の状態管理
  - notification_provider.dart: 通知の状態管理

### lib/screens/
- **役割**: 各画面のUI実装
- **予定されるサブディレクトリ**:
  - auth/: 認証関連画面（ログイン、新規登録）
  - home/: ホーム・タイムライン画面
  - post/: 投稿関連画面（作成、詳細、編集）
  - profile/: プロフィール関連画面
  - notification/: 通知画面
  - settings/: 設定画面

### lib/widgets/
- **役割**: 再利用可能なUIコンポーネント
- **予定されるファイル**:
  - post_card.dart: 投稿表示カード
  - user_avatar.dart: ユーザーアバター
  - bottom_navigation.dart: ボトムナビゲーション
  - loading_widget.dart: ローディング表示
  - error_widget.dart: エラー表示

### lib/services/
- **役割**: 外部サービスとの連携
- **予定されるファイル**:
  - api_service.dart: API通信
  - auth_service.dart: 認証サービス
  - storage_service.dart: ローカルストレージ
  - image_service.dart: 画像処理

### lib/utils/
- **役割**: ユーティリティ関数・定数
- **予定されるファイル**:
  - constants.dart: アプリ定数
  - validators.dart: バリデーション関数
  - formatters.dart: データフォーマット関数
  - helpers.dart: ヘルパー関数

## assets/ ディレクトリ（静的ファイル）

### assets/images/
- **役割**: アプリで使用する画像ファイル
- **ファイル形式**: PNG, JPG, SVG
- **用途**: 
  - アプリアイコン
  - プレースホルダー画像
  - バッジアイコン
  - 背景画像

### assets/icons/
- **役割**: アイコンファイル
- **ファイル形式**: SVG, PNG
- **用途**:
  - UIアイコン
  - ナビゲーションアイコン
  - 機能アイコン

### assets/fonts/
- **役割**: カスタムフォントファイル
- **ファイル形式**: TTF, OTF
- **用途**:
  - 日本語フォント（Noto Sans JP等）
  - カスタムフォント

## doc/ ディレクトリ（ドキュメント）

### doc/project_structure.txt
- **役割**: このファイル（プロジェクト構造の説明）

### 予定される追加ドキュメント:
- api_specification.txt: API仕様書
- database_schema.txt: データベーススキーマ
- deployment_guide.txt: デプロイメントガイド
- development_guide.txt: 開発ガイド

## 設定ファイル

### pubspec.yaml
- **役割**: プロジェクトの設定と依存関係の定義
- **内容**:
  - プロジェクト名・バージョン
  - Flutter SDK要件
  - 依存パッケージ
  - アセット設定
  - フォント設定

### pubspec.lock
- **役割**: 依存関係のロックファイル
- **内容**: 実際にインストールされたパッケージのバージョン情報
- **注意**: 手動編集は不要、自動生成される

### README.md
- **役割**: プロジェクトの概要とセットアップガイド
- **内容**:
  - プロジェクト概要
  - 技術スタック
  - セットアップ手順
  - 機能一覧

## 開発時の注意事項

1. **フォルダ構造の維持**: 各ディレクトリの役割を理解し、適切な場所にファイルを配置する
2. **命名規則**: Dartの命名規則に従い、ファイル名はsnake_caseを使用
3. **依存関係**: 新しいパッケージを追加する際はpubspec.yamlを更新
4. **アセット管理**: 画像やフォントは適切なassetsサブディレクトリに配置
5. **ドキュメント更新**: 構造変更時はこのドキュメントも更新する

## 次のステップ

1. 依存関係の追加（Provider、GoRouter等）
2. データモデルの実装
3. 状態管理の実装
4. 画面の実装
5. ウィジェットの実装
6. API連携の実装
